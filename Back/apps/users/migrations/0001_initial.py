# Generated by Django 5.2.6 on 2025-09-23 07:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('catalog', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='Email подтвержден')),
                ('is_phone_verified', models.BooleanField(default=False, verbose_name='Телефон подтвержден')),
                ('registration_source', models.CharField(choices=[('email', 'Email'), ('google', 'Google'), ('telegram', 'Telegram'), ('phone', 'Телефон')], default='email', max_length=20, verbose_name='Источник регистрации')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Мужской'), ('female', 'Женский'), ('other', 'Другой')], max_length=10, verbose_name='Пол')),
                ('receive_newsletters', models.BooleanField(default=True, verbose_name='Получать рассылки')),
                ('receive_sms', models.BooleanField(default=False, verbose_name='Получать SMS')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('middle_name', models.CharField(blank=True, max_length=100, verbose_name='Отчество')),
                ('company', models.CharField(blank=True, max_length=200, verbose_name='Компания')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Должность')),
                ('email_orders', models.BooleanField(default=True, verbose_name='Уведомления о заказах')),
                ('email_promotions', models.BooleanField(default=True, verbose_name='Промо-уведомления')),
                ('sms_orders', models.BooleanField(default=False, verbose_name='SMS о заказах')),
                ('preferred_currency', models.CharField(default='RUB', max_length=3, verbose_name='Предпочитаемая валюта')),
                ('preferred_language', models.CharField(default='ru', max_length=5, verbose_name='Предпочитаемый язык')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='catalog.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Избранное',
                'verbose_name_plural': 'Избранное',
                'unique_together': {('user', 'product')},
            },
        ),
        migrations.CreateModel(
            name='UserSocialAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('provider', models.CharField(choices=[('google', 'Google'), ('telegram', 'Telegram'), ('yandex', 'Yandex')], max_length=20, verbose_name='Провайдер')),
                ('external_id', models.CharField(max_length=100, verbose_name='Внешний ID')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email из соцсети')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='Фамилия')),
                ('avatar_url', models.URLField(blank=True, verbose_name='URL аватара')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_auths', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Социальная аутентификация',
                'verbose_name_plural': 'Социальные аутентификации',
                'unique_together': {('provider', 'external_id')},
            },
        ),
    ]
